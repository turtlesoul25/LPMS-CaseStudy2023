model EPower
uses "mmxprs"

declarations
Source: set of string
Emiss: set of string
NTimes = 6
Times: set of real
PeriodLength: array(Times) of real
Demand: array(Times) of real
MaxOutput: array(Source) of real
RunningCost: array(Source) of real
IncreaseCost: array(Source) of real
Emissions: array(Emiss, Source) of real
EmissionsLimit: array(Emiss) of real
ElectricityPrice: real
MaxHydroReserve: real
NaturalHydroInflow: real
HydroPowerEfficiencyFrac: real
WindMultiplier: real

Output: array(Source, Times) of mpvar
IncreaseOutput: array(Source, Times) of mpvar
HydroPowerPump: array(Times) of mpvar
ReserveEnergy: array(Times) of mpvar
end-declarations

initializations from "EPower.dat"
Emiss Source Times PeriodLength Demand
MaxOutput RunningCost IncreaseCost Emissions
EmissionsLimit ElectricityPrice MaxHydroReserve
NaturalHydroInflow HydroPowerEfficiencyFrac WindMultiplier
end-initializations

forward procedure objective
forward procedure header
forward procedure OutputReport
forward procedure IncreaseReport
forward procedure WaterReport


! MODEL
forall(t in Times) do
  TotalOutput(t):= sum(s in Source) Output(s,t)*PeriodLength(t)
end-do

!costs
forall(s in Source) do
  TotalRunningCost(s):= sum(t in Times) Output(s,t)*PeriodLength(t)*RunningCost(s)
  TotalIncreaseCost(s):= sum(t in Times) IncreaseOutput(s,t)*IncreaseCost(s)
end-do

!objective
NetIncome:= sum(t in Times) Demand(t)*PeriodLength(t)*ElectricityPrice
NetRunningCost:= sum(s in Source) TotalRunningCost(s)
NetIncreaseCost:= sum(s in Source) TotalIncreaseCost(s)
NetCost:= NetRunningCost + NetIncreaseCost
NetProfit:= NetIncome - NetCost

!constraints
forall(t in Times) do
  DemandCS(t):= HydroPowerPump(t) = sum(s in Source) Output(s,t)-Demand(t)

  if t = 1 then
    ReserveCS(t):= ReserveEnergy(t) = ReserveEnergy(NTimes)-(Output('Hydro',t)*PeriodLength(t))+
    (HydroPowerEfficiencyFrac*HydroPowerPump(t)*PeriodLength(t)) + (NaturalHydroInflow*PeriodLength(t))
    forall(s in Source) do
      IncreaseCS(s,t):= IncreaseOutput(s,t) >= Output(s,t) - Output(s, NTimes)
    end-do
  else
    ReserveCS(t):= ReserveEnergy(t) = ReserveEnergy(t-1)-(Output('Hydro',t)*PeriodLength(t))+
    (HydroPowerEfficiencyFrac*HydroPowerPump(t)*PeriodLength(t)) + (NaturalHydroInflow*PeriodLength(t))
    forall(s in Source) do
      IncreaseCS(s,t):= IncreaseOutput(s,t) >= Output(s,t) - Output(s, t-1)
    end-do
  end-if


  forall(s in Source) do
    if s = 'Wind' then
      OutputCS(s,t) := Output(s,t) <= MaxOutput(s)*WindMultiplier
    else
      OutputCS(s,t):= Output(s,t) <= MaxOutput(s)
    end-if
  end-do



  forall(e in Emiss) do
    Emitted(e,t):= sum(s in Source) Output(s,t)*Emissions(e,s)*PeriodLength(t)
  end-do

  ReserveEnergyCS(t):= ReserveEnergy(t) <= MaxHydroReserve
end-do

forall(e in Emiss) do
  EmissionCS(e):= sum(t in Times) Emitted(e,t) <= EmissionsLimit(e)
end-do

maximize(NetProfit)

writeln('Profit is £', strfmt(getsol(NetProfit), 10,0))
writeln('Income is £', strfmt(getsol(NetIncome), 10,0))
writeln('Costs are £', strfmt(getsol(NetCost), 10,0))


writeln
forall (s in Source) do
    write(s)
    forall (t in Times) do
      write(",", strfmt(getsol(Output(s, t)), 6, 0))
    end-do
    write(", MaxOutput = ", MaxOutput(s))
    writeln
end-do

writeln
forall (s in Source) do
    write(s)
    forall (t in Times) do
      write(",", strfmt(getsol(IncreaseOutput(s, t)), 6, 0))
    end-do
    write(", Increase cost = ", strfmt(getsol(TotalIncreaseCost(s)), 6, 0))
    writeln
end-do

writeln
forall (t in Times) do
  writeln("Demand: ", Demand(t)*PeriodLength(t),
  " and Total output: ", strfmt(getsol(TotalOutput(t)), 5),
  " and Reserve: ", strfmt(getsol(ReserveEnergy(t)), 5),
  " and Power Demand for Pump: ", strfmt(getsol(HydroPowerPump(t)), 5))
  ! " and emissions (CO2): ", strfmt(getsol(Emitted("CO2",t)),9),
  ! " and emissions(sulphur): ", strfmt(getsol(Emitted("Sulphur",t)),9))
  writeln
end-do
writeln

writeln("----------------------------------")
objective
writeln
writeln("Outputs from each source per time period:")
header
OutputReport

writeln
writeln("Increase in Output for each source per time period:")
header
IncreaseReport


writeln
writeln
writeln("Demand and Water Report:")
WaterReport

! writeln
! forall(t in Times) do
!   if getslack(DemandCS(t)) = 0 then
!     writeln("Demand for time period", t, " is ", getdual(DemandCS(t)))
!   else
!     writeln("Hi")
!   end-if
! end-do

! INTITIALISING CSV
fopen("EPower_test.csv", F_OUTPUT)

objective
writeln

writeln("Outputs from each source per time period")
header
OutputReport

writeln
writeln("Increase in Output for each source per time period")
header
IncreaseReport
writeln

writeln
writeln("Demand and Water Report")
WaterReport

fclose(F_OUTPUT)
! CLOSING CSV SECTION

! Introduce procedures to make printing of multiple results easy
procedure objective
  writeln("Total Income", ",", strfmt(getsol(NetIncome), 10,0))
  writeln("Total Costs", ",", strfmt(getsol(NetCost), 10,0))
  writeln("Total Profit", ",", strfmt(getsol(NetProfit), 10,0))
end-procedure

procedure header
  write("Time Period")
  forall(s in Source) write(",",s)
end-procedure

procedure OutputReport
  forall (t in Times) do
    writeln
    write(t)
    forall(s in Source) do
      write(",", strfmt(getsol(Output(s,t)), 5, 0))
    end-do
  end-do
  writeln
  write("Max. Output")
  forall (s in Source) write(",", MaxOutput(s))
  writeln
end-procedure

procedure IncreaseReport
  forall (t in Times) do
    writeln
    write(t)
    forall(s in Source) do
      write(",", strfmt(getsol(IncreaseOutput(s,t)), 6, 0))
    end-do
  end-do
  writeln
  write("Total increase in cost")
  forall (s in Source) write(",", getsol(TotalIncreaseCost(s)))
end-procedure

procedure WaterReport
  write("Time", ",", "Demand", ",", "Total Output", ",", "Reserve", ",", "Power Demand for Pump")
  forall(t in Times) do
  writeln
  write(t)
  write(",", Demand(t)*PeriodLength(t), ",", 
  strfmt(getsol(TotalOutput(t)), 5), ",",
  strfmt(getsol(ReserveEnergy(t)), 5), ",",
  strfmt(getsol(HydroPowerPump(t)), 5))
  end-do
end-procedure
! END PROCEDURES





end-model
